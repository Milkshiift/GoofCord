import { ipcMain } from "electron";
import { loadConfig } from "./config.ts";
import { getConfig } from "./config.ts";
import { getConfigBulk } from "./config.ts";
import { setConfig } from "./config.ts";
import { setConfigBulk } from "./config.ts";
import { setAutoLaunchState } from "./loader.ts";
import { getVersion } from "./utils.ts";
import { getDisplayVersion } from "./utils.ts";
import { getAsset } from "./utils.ts";
import { isEncryptionAvailable } from "./utils.ts";
import { encryptSafeStorage } from "./utils.ts";
import { decryptSafeStorage } from "./utils.ts";
import { saveFileToGCFolder } from "./utils.ts";
import { initArrpc } from "./modules/arrpc.ts";
import { getAssets } from "./modules/assetLoader.ts";
import { clearCache } from "./modules/cacheManager.ts";
import { setBadgeCount } from "./modules/dynamicIcon.ts";
import { i } from "./modules/localization.ts";
import { encryptMessage } from "./modules/messageEncryption.ts";
import { decryptMessage } from "./modules/messageEncryption.ts";
import { cycleThroughPasswords } from "./modules/messageEncryption.ts";
import { updateModsFull } from "./modules/mods.ts";
import { stopVenmic } from "./modules/venmic.ts";
import { createSettingsWindow } from "./windows/settings/main.ts";
import { loadCloud } from "./windows/settings/cloud/cloud.ts";
import { saveCloud } from "./windows/settings/cloud/cloud.ts";
import { deleteCloud } from "./windows/settings/cloud/cloud.ts";

// This file is auto-generated by genIpcHandlers, any changes will be lost
ipcMain.handle("config:loadConfig", async (event, ) => { return await loadConfig(); });
ipcMain.on("config:getConfig", (event, key, bypassDefault) => { event.returnValue = getConfig(key, bypassDefault); });
ipcMain.on("config:getConfigBulk", (event, ) => { event.returnValue = getConfigBulk(); });
ipcMain.handle("config:setConfig", async (event, entry, value) => { return await setConfig(entry, value); });
ipcMain.handle("config:setConfigBulk", async (event, toSet) => { return await setConfigBulk(toSet); });
ipcMain.handle("loader:setAutoLaunchState", async (event, ) => { return await setAutoLaunchState(); });
ipcMain.on("utils:getVersion", (event, ) => { event.returnValue = getVersion(); });
ipcMain.on("utils:getDisplayVersion", (event, ) => { event.returnValue = getDisplayVersion(); });
ipcMain.on("utils:getAsset", (event, assetName) => { event.returnValue = getAsset(assetName); });
ipcMain.on("utils:isEncryptionAvailable", (event, ) => { event.returnValue = isEncryptionAvailable(); });
ipcMain.on("utils:encryptSafeStorage", (event, plaintextString) => { event.returnValue = encryptSafeStorage(plaintextString); });
ipcMain.on("utils:decryptSafeStorage", (event, encryptedBase64) => { event.returnValue = decryptSafeStorage(encryptedBase64); });
ipcMain.handle("utils:saveFileToGCFolder", async (event, filePath, content) => { return await saveFileToGCFolder(filePath, content); });
ipcMain.handle("arrpc:initArrpc", async (event, ) => { return await initArrpc(); });
ipcMain.on("assetLoader:getAssets", (event, ) => { event.returnValue = getAssets(); });
ipcMain.handle("cacheManager:clearCache", async (event, ) => { return await clearCache(); });
ipcMain.handle("dynamicIcon:setBadgeCount", async (event, count) => { return await setBadgeCount(count); });
ipcMain.on("localization:i", (event, key) => { event.returnValue = i(key); });
ipcMain.on("messageEncryption:encryptMessage", (event, message) => { event.returnValue = encryptMessage(message); });
ipcMain.on("messageEncryption:decryptMessage", (event, message) => { event.returnValue = decryptMessage(message); });
ipcMain.handle("messageEncryption:cycleThroughPasswords", (event, ) => { return cycleThroughPasswords(); });
ipcMain.handle("mods:updateModsFull", async (event, ) => { return await updateModsFull(); });
ipcMain.handle("venmic:stopVenmic", (event, ) => { return stopVenmic(); });
ipcMain.handle("main:createSettingsWindow", async (event, ) => { return await createSettingsWindow(); });
ipcMain.handle("cloud:loadCloud", async (event, ) => { return await loadCloud(); });
ipcMain.handle("cloud:saveCloud", async (event, ) => { return await saveCloud(); });
ipcMain.handle("cloud:deleteCloud", async (event, ) => { return await deleteCloud(); });